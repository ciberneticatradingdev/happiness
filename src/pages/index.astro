---
import Layout from "../layouts/Layout.astro";
import { CA, BUY_URL, TWITTER_URL, TELEGRAM_URL, DEXSCREENER_URL } from "../utils/utils";

---

<Layout
	title="Money Buys Happiness - The Memecoin That Speaks Truth"
	description="Money Buys Happiness is a revolutionary memecoin on Solana that embraces the simple truth: money does buy happiness. Join the movement and discover financial joy."
	keywords="money buys happiness, memecoin, solana, cryptocurrency, meme token, financial freedom, happiness coin, crypto investment"
	canonicalURL=""
	robots="index, follow"
>
  <!-- seccion 1 -->

  <div class="min-h-screen bg-[#f7eb1b] flex flex-col items-center py-10">
    <h1 class="text-white text-4xl font-bold">
      it is what it is
    </h1>

    <video src="/videohappy.mp4" autoplay loop muted playsinline class="w-96 h-96 mt-10"></video>

    <h1 class="text-white text-center mt-8 text-6xl font-bold">
      money buys happiness
    </h1>

    <a href={BUY_URL} target="_blank" class="p-4 font-thin px-8 text-2xl mt-10 bg-[#fa7e01] rounded-[35px] byrd-medium-btn inline-block text-white hover:no-underline hover:scale-110 transition-all text-center"> 
      buy now
    </a>

    <div class="w-full gap-8 mt-6 flex justify-center">
      <a href={TWITTER_URL} target="_blank" class="hover:scale-125 transition-transform">
        <img src="/social/x-icon.svg" alt="x icon" class="w-8 h-8">
      </a>
      <a href={TELEGRAM_URL} target="_blank" class="hover:scale-125 transition-transform">
        <img src="/social/tg-icon.svg" alt="telegram icon" class="w-8 h-8">
      </a>
      <a href={DEXSCREENER_URL} target="_blank" class="hover:scale-125 transition-transform">
        <img src="/social/dex-icon.svg" alt="dexscreener icon" class="w-8 h-8">
      </a>
    </div>

  </div>







    
    <!-- Modal para ver imágenes -->
    <div id="imageModal" class="fixed inset-0 bg-black/80 z-50 hidden items-center justify-center p-4">
      <div class="relative max-w-4xl max-h-full">
        <button id="closeModal" class="absolute -top-12 right-0 text-white text-4xl hover:text-gray-300 transition-colors">
          ×
        </button>
        <img id="modalImage" src="" alt="Meme" class="max-w-full max-h-full object-contain rounded-lg">
      </div>
    </div>





<style>
  ul {
    list-style-type: none;
    padding-left: 0;
  }

  li {
    padding: 0.75rem 0;
  }

  .hero-image {
    animation: slideUp 1s ease-out forwards;
    transform: translateY(100%);
  }

  @keyframes slideUp {
    to {
      transform: translateY(0);
    }
  }

  .fancy-frame {
    border: 8px solid white;
    border-radius: 12px;
    box-shadow: 
      0 0 0 2px #d72d0e,
      0 0 15px rgba(0,0,0,0.3),
      inset 0 0 15px rgba(0,0,0,0.3);
    transition: transform 0.3s ease;
  }

  .fancy-frame:hover {
    transform: scale(1.02);
  }

  .gradient-text {
    background: linear-gradient(to right, #ffffff, #ffd700);
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    text-shadow: 0 2px 10px rgba(255,255,255,0.2);
  }
  
  .byrd-medium-btn {
    font-family: 'ByrdMedium', 'Byrd Fallback', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif !important;
  }
</style>

<style>
    .scroll-container {
      position: relative;
      overflow: hidden;
    }
    
    #scrollContent {
      position: relative;
      transition: transform 0.1s ease-out;
    }
</style>
    
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const scrollContent = document.getElementById('scrollContent');
    if (!scrollContent) return;
    const container = scrollContent.parentElement;
    let lastScrollY = window.scrollY;
    let ticking = false;
    let containerTop = container.offsetTop;
    let containerBottom = containerTop + container.offsetHeight;
    let maxScroll;

    function updatePosition() {
      if (window.innerWidth < 768) return;
      
      if (!scrollContent) return;
      
      const scrollY = window.scrollY;
      const windowHeight = window.innerHeight;
      const contentHeight = scrollContent.offsetHeight;
      maxScroll = contentHeight - windowHeight;

      if (scrollY >= containerTop && scrollY <= containerBottom - windowHeight) {
        const scrollPercent = (scrollY - containerTop) / (containerBottom - containerTop - windowHeight);
        const translateY = Math.min(maxScroll * scrollPercent, maxScroll);
        
        scrollContent.style.transform = `translateY(${translateY}px)`;
      }
      
      lastScrollY = scrollY;
      ticking = false;
    }

    window.addEventListener('scroll', () => {
      if (!ticking) {
        window.requestAnimationFrame(updatePosition);
        ticking = true;
      }
    });

    window.addEventListener('resize', () => {
      containerTop = container.offsetTop;
      containerBottom = containerTop + container.offsetHeight;
      
      if (window.innerWidth < 768) {
        scrollContent.style.transform = 'translateY(0)';
      } else {
        updatePosition();
      }
    });

    updatePosition();
  });
  
  // Modal functionality for memes
   document.addEventListener('DOMContentLoaded', () => {
     const modal = document.getElementById('imageModal');
     const modalImage = document.getElementById('modalImage') as HTMLImageElement;
     const closeModal = document.getElementById('closeModal');
     const memeItems = document.querySelectorAll('.meme-item');
     
     // Open modal when clicking on meme items
     memeItems.forEach(item => {
       item.addEventListener('click', () => {
         const imageUrl = item.getAttribute('data-image');
         if (modalImage && imageUrl) {
           modalImage.src = imageUrl;
         }
         modal?.classList.remove('hidden');
         modal?.classList.add('flex');
         document.body.style.overflow = 'hidden';
       });
     });
    
    // Close modal
     const closeModalFunction = () => {
       modal?.classList.add('hidden');
       modal?.classList.remove('flex');
       document.body.style.overflow = 'auto';
     };
     
     closeModal?.addEventListener('click', closeModalFunction);
     
     // Close modal when clicking outside the image
      modal?.addEventListener('click', (e) => {
        if (e.target === modal) {
          closeModalFunction();
        }
      });
      
      // Close modal with ESC key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && modal && !modal.classList.contains('hidden')) {
          closeModalFunction();
        }
      });
    });
</script>